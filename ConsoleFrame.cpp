#include "ConsoleFrame.h"
#include "Utils.h"

void ConsoleFrame::FillingFileFrame(int& detailCount, int& bLength, std::string& foutWriteString, std::fstream& fout)
{
	Utils utils{};

	std::cout << "\n\nEnter a count of details for cutting: "; std::cin >> detailCount;
	std::cout << "Enter a baseboard length:"; std::cin >> bLength;
	
	utils.FillStr(foutWriteString, "ATTENTION! THIS FILE IS AUTOGENERATED! PLEASE REPLACE 0 WITH YOUR DATA!\n\n");
	fout << foutWriteString;
	foutWriteString.clear();

	utils.FillStr(foutWriteString, "Baseboard length: " + std::to_string(bLength) + ";\n");
	fout << foutWriteString;
	foutWriteString.clear();

	for (int i = 1; i < detailCount + 1; i++)
	{
		if (i == 1)
		{
			utils.FillStr(foutWriteString, "==== COUNT ZONE ====\n");
		}

		utils.FillStr(foutWriteString, "Detail " + std::to_string(i) + " count: 0;\n");
		fout << foutWriteString;
		foutWriteString.clear();
	}
	for (int i = 1; i < detailCount + 1; i++)
	{
		if (i == 1)
		{
			foutWriteString.append("==== LENGTH ZONE ====\n");
		}

		utils.FillStr(foutWriteString, "Detail " + std::to_string(i) + " length: 0;\n");
		fout << foutWriteString;
		foutWriteString.clear();
	}
	fout.close();
}

void ConsoleFrame::EnterFrame(Baseboard& baseboard, std::fstream& fout, std::vector<Detail>& details)
{
	int					detailCount{};
	int					choice{};
	int					bLength{};
	std::string			choice_str{};
	std::string			foutWriteString{};
	Utils				utils{};
	std::cout << "Select the data input method: \n 1 - console \n 2 - file: "; std::cin >> choice;
	switch (choice)
	{
	case 1:
		std::cout << "\n\nEnter a count of details for cutting: "; std::cin >> detailCount;
		std::cout << "Enter a baseboard length:"; std::cin >> bLength;
		// дописать ввод с консоли
		break;

	case 2:
		FillingFileFrame(detailCount, bLength, foutWriteString, fout);
		std::cout << "\n\nWe create a file in main .exe directory.\nPlease, open it and write data for each detail, and then go back to this windows and enter +: \n>>"; std::cin >> choice_str;
		if (choice_str == "+")
		{
			std::string	allStrings{};
			int			deleteSymbols{ 117 };
			int			startDeleteIndex{ 0 };

			allStrings = utils.ReadFile("data.txt");
			allStrings.erase(startDeleteIndex, deleteSymbols);

			for (int i = 0; i < detailCount; i++)
			{
				Detail detail{};
				std::string countDetail{};
				std::string lengthDetail{};
				countDetail = utils.GetDetailCount(allStrings);
				lengthDetail = utils.GetDetailLength(allStrings);
				detail.SetCount(atoi(countDetail.c_str()));
				detail.SetLength(atoi(lengthDetail.c_str()));
				details.push_back(detail);
			}
			std::cout << "\nALL DATA HAS BEEN READ.\n\n";
		}
		else
		{
			std::cout << "You enter incorrect data in console window. \nPlease, start again.";
		}
		break;

	default:
		break;
	}
	std::cout << std::endl;
	baseboard.SetLength(bLength);
}

